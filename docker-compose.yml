services:

  kafka:
    build: 
      context: .
      target: kafka
    container_name: kafka
    networks:
      - kafka_network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
    
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_KAFKA_CLUSTER_ID: <KAFKA_CLUSTER_ID>
      CONTROL_CENTER_CONNECT_CLUSTER: connect:8083
      CONTROL_CENTER_KSQL_URL: http://ksql-server:8088
      CONTROL_CENTER_REPLICATION_FACTOR: 1
    networks:
      - kafka_network
    

  init-kafka:
    build: 
      context: .
      target: kafka
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      until /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list; do
        echo 'Waiting for Kafka broker to be ready...'
        sleep 5
      done

      echo -e 'Creating kafka topics'
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic usercreated --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
    networks:
      - kafka_network

  spark-master:
    build: 
      context: .
      target: spark
    container_name: spark-master
    depends_on:
      - cassandra
    volumes:
      - ./apps/:/opt/bitnami/spark/apps/
      - ./Models/:/opt/bitnami/spark/Models/
    networks:
      - kafka_network
    ports:
      - "9090:8080"
      - "7077:7077"

  spark-worker:
    build: 
      context: .
      target: spark
    volumes:
      - ./requirements/spark.txt:/opt/bitnami/spark/requirements.txt
      - ./Models/:/opt/bitnami/spark/Models/
    depends_on:
      - spark-master
    networks:
      - kafka_network
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 3
      SPARK_WORKER_MEMORY: 4g
      SPARK_MASTER_URL: spark://spark-master:7077

  webserver:
    build: 
      context: .
      target: airflow
    container_name: webserver
    command: webserver
    depends_on:
      - postgres
    networks:
      - kafka_network
    ports:
      - "8080:8080"
    volumes:
      - ./dags/:/opt/airflow/dags/
      - ./tests/:/opt/airflow/tests/
      - ./scripts/entrypoint.sh:/opt/airflow/scripts/entrypoint.sh
      - ./requirements/airflow.txt:/opt/airflow/requirements.txt
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  scheduler:
    build: 
      context: .
      target: airflow
    container_name: scheduler
    depends_on:
      webserver:
        condition: service_healthy
    networks:
      - kafka_network
    volumes:
      - ./dags/:/opt/airflow/dags/
      - ./tests/:/opt/airflow/tests/
      - ./scripts/entrypoint.sh:/opt/airflow/scripts/entrypoint.sh
      - ./requirements/airflow.txt:/opt/airflow/requirements.txt
    env_file:
      - .env
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    build: 
      context: .
      target: postgres
    container_name: postgres
    networks:
      - kafka_network
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
  
  cassandra:
    image: cassandra:latest
    container_name: cassandra
    networks:
      - kafka_network
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_NUM_TOKENS=256
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_START_RPC=true
    volumes:
      - cassandra_data:/var/lib/cassandra

  go_cassandra_app:
    build:
      context: .
      target: golang
    container_name: go_cassandra_app
    networks:
      - kafka_network
    ports:
      - "8081:8081"
    depends_on:
      - cassandra

volumes:
  cassandra_data:

networks:
  kafka_network:
    driver: bridge